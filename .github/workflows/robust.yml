name: ORCA Pipeline Robust Input Variation Test
on:
  workflow_dispatch:
jobs:
  robust-inputs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install watchdog matplotlib configparser
      - name: Create config
        run: |
          cat > config.txt << 'EOF'
          [paths]
          input_dir = folders/input
          waiting_dir = folders/waiting
          working_dir = folders/working
          products_dir = folders/products
          [orca]
          orca_path = /usr/bin/mock_orca
          orca_2mkl_path = /usr/bin/mock_orca_2mkl
          generate_molden = true
          method = B3LYP
          basis_set = def2-SVP
          charge = 0
          multiplicity = 1
          nprocs = 2
          maxcore = 1024
          max_parallel_jobs = 2
          max_retries = 1
          solvent_model = CPCM
          solvent_name = Chloroform
          extra_keywords = 
          [gmail]
          user = test@example.com
          app_password = testpassword
          recipient = test@example.com
          [notification]
          threshold = 3
          debounce_seconds = 2
          EOF
      - name: Create mock ORCA executables
        run: |
          sudo tee /usr/bin/mock_orca << 'EOF'
          #!/bin/bash
          input_file="$1"
          basename="${input_file%.inp}"
          sleep 1
          cat > "${basename}.out" << 'OUTEOF'
                                           * O   R   C   A *
                             --- An Ab Initio, DFT and Semiempirical electronic structure package ---
          ****************************
          * Geometry Optimization     *
          ****************************
          CYCLE    1
          Total Energy:  -40.123456
          CYCLE    2
          Total Energy:  -40.123465
          CYCLE    3
          Total Energy:  -40.123467
          ***        THE OPTIMIZATION HAS CONVERGED     ***
          FINAL SINGLE POINT ENERGY        -40.123467891
          CARTESIAN COORDINATES (ANGSTROEM)
          C      0.000000    0.000000    0.000000
          H      1.089000    0.000000    0.000000
          H     -0.363000    1.027000    0.000000
          H     -0.363000   -0.513500    0.889165
          H     -0.363000   -0.513500   -0.889165
          ORCA TERMINATED NORMALLY
          OUTEOF
          echo "mock" > "${basename}.gbw"
          exit 0
          EOF
          sudo tee /usr/bin/mock_orca_2mkl << 'EOF'
          #!/bin/bash
          basename="$1"
          echo "molden" > "${basename}.molden.input"
          exit 0
          EOF
          sudo chmod +x /usr/bin/mock_orca /usr/bin/mock_orca_2mkl
      - name: Start pipeline
        run: |
          python main.py &
          echo $! > pipeline.pid
          sleep 2
      - name: "Provide varied inputs (A: extra spaces, tabs; B: lowercase element; C: CRLF; D: big molecule)"
        run: |
          mkdir -p folders/input
          # A) spacing variations
          printf "5\nSpacingVar\nC    0.0\t0.0\t0.0\nH   1.089   0.0   0.0\nH  -0.363  1.027  0.0\nH  -0.363 -0.5135 0.889165\nH  -0.363 -0.5135 -0.889165\n" > folders/input/spacing.xyz
          
          # B) lowercase element symbol
          printf "3\nlowercase\nO 0.0 0.0 0.0\nh 0.757 0.586 0.0\nh -0.757 0.586 0.0\n" > folders/input/lowercase.xyz
          
          # C) CRLF line endings
          printf "5\r\nCRLF\r\nC 0.0 0.0 0.0\r\nH 1.089 0.0 0.0\r\nH -0.363 1.027 0.0\r\nH -0.363 -0.5135 0.889165\r\nH -0.363 -0.5135 -0.889165\r\n" > folders/input/crlf.xyz
          
          # D) bigger molecule (ethanol)
          cat > folders/input/ethanol.xyz << 'EOF'
          9
          Ethanol
          C -0.748 0.000 0.000
          C 0.748 0.000 0.000
          O 1.450 1.200 0.000
          H -1.123 0.943 0.000
          H -1.123 -0.471 0.889
          H -1.123 -0.471 -0.889
          H 1.123 -0.943 0.000
          H 2.050 1.200 0.890
          H 2.050 1.200 -0.890
          EOF
          
          # E) inject later to test mid-run
          sleep 6
          printf "5\nLate\nC 0 0 0\nH 1 0 0\nH -1 0 0\nH 0 1 0\nH 0 -1 0\n" > folders/input/late.xyz
          
          sleep 12
      - name: Summarize
        run: |
          echo "=== Logs (tail) ==="; tail -n 80 folders/logs/pipeline.log || true
          echo "=== Waiting ==="; find folders/waiting -type f || true
          echo "=== Products ==="; find folders/products -type f | sort || true
      - name: Validate
        run: |
          # 1) All five files detected
          for f in spacing.xyz lowercase.xyz crlf.xyz ethanol.xyz late.xyz; do
            grep -q "DETECT New XYZ: $f" folders/logs/pipeline.log || (echo "Missing detect for $f" && exit 1);
          done
          # 2) At least 5 success jobs (opt_success) and 2+ freq_success from chaining
          test $(find folders/products -type d -name "*opt_success*" | wc -l) -ge 5
          test $(find folders/products -type d -name "*freq_success*" | wc -l) -ge 2
      - name: Stop pipeline
        if: always()
        run: |
          kill $(cat pipeline.pid) 2>/dev/null || true
